#!/usr/bin/env php
<?php
 
$commands = [
'
| => make:Controller' => ' Create a new controller with Model',
    '| => serve' => ' Start the PHP development server',
    '| => help' => ' Lists available command',
    '| => dev' => ' Developer Contact',
    '| => run:installer' => 'Install all required.
|
--------------------------------------------------------------->
    '
];

$command = $argv[1] ?? 'help';

switch ($command) {
    case 'make:controller':
        createController($argv[2]);
        break;

    case "make:model":
        createModel($argv[2]);
        break;
    
    case 'serve':
        StartServer();
        break;

    case 'dev':
        dev();
        break;
    
    case 'make:view':
        createView($argv[2]);
        break;

    case 'run:installer':
        installer();
        // echo "sam";
        break;
    
    case 'help':
    default:
        showHelp();
        break;
}

function installer() {
    
    $app_key = bin2hex(random_bytes(15)); //app_key(15);
    $tempSession = bin2hex(random_bytes(15)); //app_key(6);
    
    try {
        $db = new PDO("sqlite:databse.db");
        $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    
        $QUERI = "
        CREATE TABLE IF NOTEXISTS jobs (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            app_key TEXT NOT NULL,
            tempsession TEXT NOT NULL,
            created_at DATATIME DEFAULT CURRENT_TIMESTAMP
        );
        ";
    
        if ($QUERI) {
            echo 'configuration complete!';
        }
    
        $sql = "INSERT INTO `jobs` SET app_key=:appkey, tempsession=:tempsession";
        $stmt = $db->prepare($sql);
        $stmt->bindParam(":appkey", $app_key, PDO::PARAM_STR);
        $stmt->bindParam(":tempsession", $tempSession, PDO::PARAM_STR);
        
        if ($stmt->execute()) {
            echo "App key created successful!";
        }
    
    } catch (PDOException $e) {
        echo $e->getMessage();
    }
    
    // tr
    $envexample = ".env.example";
    $envTemplate = '
#APP INFO
APP_NAME=SAM OCHU
APP_ENV=loacal
APP_KEY='.$app_key.'

#DATABASE INFO
#USE MYSQL OR SQLITE DATABSE
DATABASE=mysql 
DB_HOST=127.0.0.1
DB_NAME=sam
DB_USER=root
DB_PASSWORD=
';
    // caniuse-lite is outdated. Please run: npx update-browserslist-db@latest
    
    $envna = ".env";
    file_put_contents($envna, $envTemplate);
    file_put_contents($envexample, $envTemplate);
    echo '
     ---------------------------------
    |        Env file created.        |
     ---------------------------------
    ';
    
    // exec("composer init");
    // exec("composer install");
    echo '
    
    
    
     -------------------------------------
    |                                     |
    | installation Complete. happy coding |
    |                                     |
     -------------------------------------
    ';
}

function createController($name) {
    if (!$name) {
        echo "Please specify a controller name.\n";
    }
    $date = date('H:i:s');
    $filname = "App/Controller/{$name}Controller.php";
    $template = '
<?php
// php framework by SAM TECHNOLOGY.
// customise as you wish

require "App/Model/'.$name.'.php"; 


class '.$name.'Controller 
{ 
    //  
    public function index() 
    { 
        //  
    } 

    public function readone($session_id) 
    { 
        $'.$name.' = new '.$name.'(); 

        $result = $'.$name.'->readone($session_id);
 
        if ($result["status"] == "fail") { 
            return $result["message"]; 
        } 
 
        // user info 
        return $result; 
         
    } 

    public function readAll() 
    { 
        $'.$name.' = new '.$name.'(); 

        $users = $'.$name.'->readAll(); 

        //  
        return $users; 

    } 


    public function create($request) 
    { 
        $'.$name.' = new '.$name.'();

        $name = $request["name"]; 
        $description = $request["description"]; 
        $extra = $request["extra"]; 

        $result = $'.$name.'->create($name, $description, $extra); 

        return $result; 
    }

    public function update($request) 
    {
        $'.$name.' = new '.$name.'();

        // $item1 = $request["item1"];
        // $item2 = $request["item2"];
        // $item3 = $request["item3"];

        // $result = $'.$name.'->update($item1, $item2, $item3);

        if ($result["status"] == "success") {
           return "update successful!";
        }
        return $result["message"];
    }
    
    public function delete($request)
    {
        $'.$name.' = new '.$name.'();

        $delete = $request["id"];

        $result = $'.$name.'->delete($delete);

        if ($result["status"] == "success") {
           return $request["message"];
        }
        return $result["message"];
    }
}
';
    $model = "App/Model/".$name.".php";
    $mtamplate = '
    <?php
    // php framework by SAM TECHNOLOGY
    // Edit as you wish according to Documentation

    require "core/Database.php";
    
    class '.$name.'
    {
        public function readone($id) 
        {
           $sam = new Database();
           $kibalanga = $sam->connect();
    
           try {
    
               $sql = "SELECT * FROM `'.$name.'s` WHERE id=:id";
               $stmt = $kibalanga->prepare($sql);
               $stmt->bindParam(":id", $id, PDO::PARAM_INT);
    
               if ($stmt->execute()) {
                  $data = $stmt->fetch(PDO::FETCH_ASSOC);
                  
                  if (empty($data)) {
                     return "No data found!";
                  }
    
                  return $data;
               }
               
            } catch (PDOException $e){
               return "Error: " . $e->getMessage();
            }
        }
    
        public function readall()
        {
           $sam = new Database();
           $kibalanga = $sam->connect();
    
           try {
               $sql = "SELECT * FROM `'.$name.'s` ";
               $stmt = $kibalanga->prepare($sql);
    
               if ($stmt->execute()) {
                  $data = $stmt->fetchAll(PDO::FETCH_ASSOC);
                  
                  if (empty($data)) {
                     return "No data found!";
                  }
    
                  return $data;
               }
               
            } catch (PDOException $e){
               return "Error: " . $e->getMessage();
            }
        }
    
        public function create($name, $description, $extra) 
        {
            $sam = new Database();
            $kibalanga = $sam->connect();
    
            try {
                // Edit according to your database
                $sql = "INSERT INTO `'.$name.'s` SET name=:name, description=:description, extra=:extra";
                $stmt = $kibalanga->prepare($sql);
                $stmt->bindParam(":name", $name, PDO::PARAM_STR);
                $stmt->bindParam(":description", $description, PDO::PARAM_STR);
                $stmt->bindParam(":extra", $extra, PDO::PARAM_STR);
    
                if ($stmt->execute()) {
                   return [
                      "status" => "success",
                      "message" => "create successful!"
                   ];
                } else {
                   return [
                      "message" => "Error: ".$stmt->execute()
                   ];
                }
    
            } catch(PDOException $e) {
                return "Error: ".$e->getMessage();
            }
        }
    
        public function update($name, $description, $extra)
        {
          $sam = new Database();
          $kibalanga = $sam->connect();
    
          try {
             $sql = "UPDATE FROM `'.$name.'s` SET name=:name, description=:description, extra=:extra";
             $stmt = $kibalanga->prepare($sql);
             $stmt->bindParam(":name", $name, PDO::PARAM_STR);
             $stmt->bindParam(":descrption", $description, PDO::PARAM_STR);
             $stmt->bindParam(":extra", $extra, PDO::PARAM_STR);
    
             if ($stmt->execute()) {
                return [
                   "status" => "success",
                   "message" => "update successful!"
                ];
             } else {
                return ["message" => "upadte fail!"];
             }
    
          } catch (PDOException $e) {
             return $e->getMessage();
          }
        }
    
        public function delete($id)
        {
          $sam = new Database();
          $kibalanga = $sam->connect();
    
          try {
             $sql = "DELETE FROM `'.$name.'s` WHERE id=:id";
             $stmt = $kibalanga->prepare($sql);
             $stmt->bindParam(":id", $id, PDO::PARAM_INT);
    
             if ($stmt->execute()) {
                return [
                   "status" => "success",
                   "message" => "Delete successful!"
                ];
             } else {
                return [
                   "message" => "Delete fail!"
                ];
             }
    
          } catch (\Throwable $e) {
             return $e->getMessage();
          }
        }
    }
    ?>
        
?>
    ';
    file_put_contents($filname, $template);
    echo '
    -------------------------------------------------->
   |                                                  |
   | Controller '.$name.' Created at '.$date.'            
   |                                                  |
    -------------------------------------------------->
    ';
    file_put_contents($model, $mtamplate);
    echo '
    -------------------------------------------------->
   |                                                  |
   | Model '.$name.' Created at '.$date.'            
   |                                                  |
    -------------------------------------------------->
    ';
}

function dev () {
    echo '
     --------------------------
    |                          |
    | Whatsapp +255780771116   |
    |                          |
     --------------------------
    ';

    $linkL = "xdg-open https://wa.me/255780771116";
    $linkW = "start https://wa.me/255780771116";
    $linkM = "open https://wa.me/255780771116";
    
    if (PHP_OS_FAMILY === "Linux") {
        exec($linkL);
    } elseif (PHP_OS_FAMILY === "Windows") {
        exec($linkW);
    } elseif (PHP_OS_FAMILY === "Darwin") {
        exec($linkM);
    }
}

function StartServer() {
    echo '
    ----------------------------------------------------->
    |
    |  Start Development server at http://localhost:8080\n
    |
    ----------------------------------------------------->
    ';
    $linkL = "xdg-open http://localhost:8080";
    $linkW = "start http://localhost:8080";
    $linkM = "open http://localhost:8080";
    
    if (PHP_OS_FAMILY === "Linux") {
        exec($linkL);
    } elseif (PHP_OS_FAMILY === "Windows") {
        exec($linkW);
    } elseif (PHP_OS_FAMILY === "Darwin") {
        exec($linkM);
    }
    exec("php -S localhost:8080");
}

function showHelp() {
    global $commands;
    echo '
------------------> Sam CLI - Available commands: <---------------
    ';
    foreach($commands as $cmd => $desc) {
        echo "$cmd - $desc\n";
    }
}

function createModel($name) {
    $date = date('H:i:s');
    $template = '
    <?php
    // php framework by SAM TECHNOLOGY
    // Edit as you wish according to Documentation

    require "core/Database.php";
    
    class sam
    {
        public function readone($id) 
        {
           $sam = new Database();
           $kibalanga = $sam->connect();
    
           try {
    
               $sql = "SELECT * FROM `'.$name.'` WHERE id=:id";
               $stmt = $kibalanga->prepare($sql);
               $stmt->bindParam(":id", $id, PDO::PARAM_INT);
    
               if ($stmt->execute()) {
                  $data = $stmt->fetch(PDO::FETCH_ASSOC);
                  
                  if (empty($data)) {
                     return "No data found!";
                  }
    
                  return $data;
               }
               
            } catch (PDOException $e){
               return "Error: " . $e->getMessage();
            }
        }
    
        public function readall()
        {
           $sam = new Database();
           $kibalanga = $sam->connect();
    
           try {
               $sql = "SELECT * FROM `'.$name.'` ";
               $stmt = $kibalanga->prepare($sql);
    
               if ($stmt->execute()) {
                  $data = $stmt->fetchAll(PDO::FETCH_ASSOC);
                  
                  if (empty($data)) {
                     return "No data found!";
                  }
    
                  return $data;
               }
               
            } catch (PDOException $e){
               return "Error: " . $e->getMessage();
            }
        }
    
        public function create($name, $description, $extra) 
        {
            $sam = new Database();
            $kibalanga = $sam->connect();
    
            try {
                // Edit according to your database
                $sql = "INSERT INTO `'.$name.'` SET name=:name, description=:description, extra=:extra";
                $stmt = $kibalanga->prepare($sql);
                $stmt->bindParam(":name", $name, PDO::PARAM_STR);
                $stmt->bindParam(":description", $description, PDO::PARAM_STR);
                $stmt->bindParam(":extra", $extra, PDO::PARAM_STR);
    
                if ($stmt->execute()) {
                   return [
                      "status" => "success",
                      "message" => "create successful!"
                   ];
                } else {
                   return [
                      "message" => "Error: ".$stmt->execute()
                   ];
                }
    
            } catch(PDOException $e) {
                return "Error: ".$e->getMessage();
            }
        }
    
        public function update($name, $description, $extra)
        {
          $sam = new Database();
          $kibalanga = $sam->connect();
    
          try {
             $sql = "UPDATE FROM `'.$name.'` SET name=:name, description=:description, extra=:extra";
             $stmt = $kibalanga->prepare($sql);
             $stmt->bindParam(":name", $name, PDO::PARAM_STR);
             $stmt->bindParam(":descrption", $description, PDO::PARAM_STR);
             $stmt->bindParam(":extra", $extra, PDO::PARAM_STR);
    
             if ($stmt->execute()) {
                return [
                   "status" => "success",
                   "message" => "update successful!"
                ];
             } else {
                return ["message" => "upadte fail!"];
             }
    
          } catch (PDOException $e) {
             return $e->getMessage();
          }
        }
    
        public function delete($id)
        {
          $sam = new Database();
          $kibalanga = $sam->connect();
    
          try {
             $sql = "DELETE FROM `'.$name.'` WHERE id=:id";
             $stmt = $kibalanga->prepare($sql);
             $stmt->bindParam(":id", $id, PDO::PARAM_INT);
    
             if ($stmt->execute()) {
                return [
                   "status" => "success",
                   "message" => "Delete successful!"
                ];
             } else {
                return [
                   "message" => "Delete fail!"
                ];
             }
    
          } catch (\Throwable $e) {
             return $e->getMessage();
          }
        }
    }
    ?>
        
?>
    ';
    $filname = "App/Model/{$name}.php";
    file_put_contents($filname, $template);
    echo "Model {$name} created at {$date}\n";
}

function createView($name) {
    $filname = "views/{$name}.sam.php";
    $template = '
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>'.$name.' | <?php echo APP_NAME; ?></title>
</head>
<body>
    <h1>This is '.$name.' page.</h1>
</body>
</html>
    ';
    $date = date('H:i:s');
    file_put_contents($filname, $template);
    echo "View {$name} Created at {$date}\n ";
}

?>